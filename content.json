{"meta":{"title":"Sandy","subtitle":null,"description":"公无渡河 公竟渡河","author":"Sandy","url":"https://sdracula.github.io"},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2022-04-07T13:15:34.000Z","comments":false,"path":"about/index.html","permalink":"https://sdracula.github.io/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2022-04-07T13:15:34.000Z","comments":false,"path":"client/index.html","permalink":"https://sdracula.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2022-04-07T13:15:34.000Z","comments":true,"path":"comment/index.html","permalink":"https://sdracula.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2022-04-07T13:15:34.000Z","comments":true,"path":"links/index.html","permalink":"https://sdracula.github.io/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2022-04-07T13:15:34.000Z","comments":false,"path":"lab/index.html","permalink":"https://sdracula.github.io/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2022-05-15T15:41:12.000Z","comments":false,"path":"bangumi/index.html","permalink":"https://sdracula.github.io/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2022-04-07T13:15:34.000Z","comments":true,"path":"tags/index.html","permalink":"https://sdracula.github.io/tags/index.html","excerpt":"","text":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2022-04-07T13:15:34.000Z","comments":true,"path":"rss/index.html","permalink":"https://sdracula.github.io/rss/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2022-05-07T12:15:06.000Z","comments":false,"path":"music/index.html","permalink":"https://sdracula.github.io/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2022-04-07T13:15:34.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://sdracula.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2022-04-07T13:15:34.000Z","comments":false,"path":"video/index.html","permalink":"https://sdracula.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"每日一题D2：两数之和(1)","slug":"每日一题D2：两数之和-1","date":"2023-08-16T06:51:05.000Z","updated":"2023-08-20T04:57:59.029Z","comments":true,"path":"post/21003.html","link":"","permalink":"https://sdracula.github.io/post/21003.html","excerpt":"","text":"001 两数之和给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。 哈希表字典O(1) class Solution: def twoSum(self,nums,target): n = len(nums) index = {} for i in range(n): v = target - nums[i] idx =index.get(v) if idx != None: return [i,idx] index[nums[i]] = i","categories":[{"name":"技术 题库","slug":"技术-题库","permalink":"https://sdracula.github.io/categories/技术-题库/"}],"tags":[{"name":"每日一题","slug":"每日一题","permalink":"https://sdracula.github.io/tags/每日一题/"},{"name":"哈希表","slug":"哈希表","permalink":"https://sdracula.github.io/tags/哈希表/"}],"keywords":[{"name":"技术 题库","slug":"技术-题库","permalink":"https://sdracula.github.io/categories/技术-题库/"}]},{"title":"每日一题D1：斐波那契数(509)","slug":"每日一题D1：斐波那契数(509)","date":"2023-08-13T05:25:30.000Z","updated":"2023-08-20T04:57:59.028Z","comments":true,"path":"post/13397.html","link":"","permalink":"https://sdracula.github.io/post/13397.html","excerpt":"","text":"509 斐波那契数斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) = 0，F(1) = 1F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1 给定n，请计算F(n)。 提示0 &lt;= n &lt;= 30 动态规划滚动数组class Solution { public: int fib(int n) { if(n&lt;2){ return n; } int m = 0,b=1,l=1; for(int i = 2;i&lt;n;i++){ m = b; b = l; l = m + b; } return l; } }; class Solution { public: int fib(int n) { if(n&lt;=1)return n; int a[2]={0,1}; int sum = 0; for(int i = 2;i &lt;= n; i++ ){ sum = a[1] + a[0]; a[0]=a[1]; a[1]=sum; } return a[1]; } }; class Solution { public: int fib(int n) { if(n==0) return 0; if(n==1) return 1; return fib(n-1)+fib(n-2); } };","categories":[{"name":"技术 题库","slug":"技术-题库","permalink":"https://sdracula.github.io/categories/技术-题库/"}],"tags":[{"name":"每日一题","slug":"每日一题","permalink":"https://sdracula.github.io/tags/每日一题/"},{"name":"动态规划","slug":"动态规划","permalink":"https://sdracula.github.io/tags/动态规划/"}],"keywords":[{"name":"技术 题库","slug":"技术-题库","permalink":"https://sdracula.github.io/categories/技术-题库/"}]},{"title":"一键将CSDN博客保存为PDF文件","slug":"一键将CSDN博客保存为PDF文件","date":"2023-07-13T05:44:01.000Z","updated":"2023-08-20T04:57:59.024Z","comments":true,"path":"post/11405.html","link":"","permalink":"https://sdracula.github.io/post/11405.html","excerpt":"","text":"$(function(){ /*从被选元素body移除一个类页面样式*/ $(&quot;body&quot;).removeClass(&quot;nodata&quot;); /*删除顶部导航*/ $(&quot;#csdn-toolbar&quot;).remove(); /*删除左侧导航*/ $(&quot;aside&quot;).remove(); /*删除右侧悬浮*/ $(&quot;.csdn-side-toolbar&quot;).remove(); /*删除CSDN文章上方*/ $(&quot;.article-header-box .article-info-box&quot;).remove(); $(&quot;#blogColumnPayAdvert&quot;).remove(); /*展开CSDN文章中被隐藏的代码段：从被选元素&lt;pre class=&quot;set-code-hide&quot;移除一个类页面样式*/ $(&#39;pre[class=&quot;set-code-hide prettyprint&quot;]&#39;).removeClass(&quot;set-code-hide&quot;); /*删除CSDN文章中被隐藏的代码段上面的遮罩*/ $(&quot;.hide-preCode-box&quot;).remove(); /*删除CSDN文章下方*/ $(&quot;.more-toolbox-new&quot;).remove(); $(&quot;.reward-box-new&quot;).remove(); $(&quot;.recommend-tit-mod&quot;).remove(); $(&quot;.blog-footer-bottom&quot;).remove(); /*删除CSDN文章下方评论、其他博客链接*/ $(&quot;.comment-box, .recommend-box, #csdn-shop-window, .template-box&quot;).remove(); /*删除CSDN文章下方公众号链接、笑脸评级*/ $(&quot;#blogExtensionBox, #recommendNps&quot;).remove(); /*修改CSDN文章css样式为》默认样式&#39;display&#39;:&#39;contents&#39;或自定义宽度&#39;width&#39;:&#39;1100px&#39;或自定义宽度&#39;width&#39;:&#39;825px&#39;*/ $(&quot;main&quot;).css({&#39;width&#39;:&#39;1100px&#39;}); /*弹出打印窗口》另存为PDF文件*/ window.print(); });","categories":[{"name":"技术","slug":"技术","permalink":"https://sdracula.github.io/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sdracula.github.io/categories/技术/"}]},{"title":"Pytorch#D01:数据操作","slug":"Pytorch-D01-数据操作","date":"2023-04-02T00:48:15.000Z","updated":"2023-08-20T04:57:59.031Z","comments":true,"path":"post/10728.html","link":"","permalink":"https://sdracula.github.io/post/10728.html","excerpt":"","text":"数据处理深度学习存储和操作数据的主要接口是张量（𝑛维数组）。它提供了各种功能，包括基本数学运算、广播、索引、切片、内存节省和转换其他Python对象。 张量属性 创建有序整数张量：arrange属性x = torch.arrange(12) x tensor([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) 访问张量形状：shape属性x.shape torch.Size([12]) 访问张量元素总数（大小）：numel方法x.numel() 12 改变张量形状X = x.reshape(3,4) X tensor([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]]) 矩阵初始化torch.zeros((2, 3, 4)) torch.ones((2, 3, 4)) torch.randn(3, 4) torch.tensor([[2, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]]) 张量运算 按元素操作x = torch.tensor([1.0, 2, 4, 8]) y = torch.tensor([2, 2, 2, 2]) x + y, x - y, x * y, x / y, x ** y # **运算符是求幂运算 torch.exp(x) 多个张量连结X = torch.arange(12, dtype=torch.float32).reshape((3,4)) Y = torch.tensor([[2.0, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]]) torch.cat((X, Y), dim=0), torch.cat((X, Y), dim=1) (tensor([[ 0., 1., 2., 3.], [ 4., 5., 6., 7.], [ 8., 9., 10., 11.], [ 2., 1., 4., 3.], [ 1., 2., 3., 4.], [ 4., 3., 2., 1.]]), tensor([[ 0., 1., 2., 3., 2., 1., 4., 3.], [ 4., 5., 6., 7., 1., 2., 3., 4.], [ 8., 9., 10., 11., 4., 3., 2., 1.]])) 逻辑运算X == Y tensor([[False, True, False, True], [False, False, False, False], [False, False, False, False]]) 4.求和X.sum() #对张量中的所有元素进行求和，会产生一个单元素张量。 tensor(66.) 广播机制在两个张量形状不同的情况下，调用广播机制（broadcasting mechanism）执行按元素操作。工作方式:1.通过适当复制元素来扩展一个或两个数组，以便在转换之后，两个张量具有相同的形状；2.对生成的数组执行按元素操作。a = torch.arange(3).reshape((3, 1)) b = torch.arange(2).reshape((1, 2)) a, b (tensor([[0], [1], [2]]), tensor([[0, 1]])) a + b tensor([[0, 1], [1, 2], [2, 3]]) 索引和切片与Python数组相同，第一个元素的索引是0，最后一个元素的索引是-1。[m,n]包括了第m到n-1个元素X[-1], X[1:3] X[1, 2] = 9 X X[0:2, :] = 12 X (tensor([ 8., 9., 10., 11.]), tensor([[ 4., 5., 6., 7.], [ 8., 9., 10., 11.]])) tensor([[ 0., 1., 2., 3.], [ 4., 5., 9., 7.], [ 8., 9., 10., 11.]]) tensor([[12., 12., 12., 12.], [12., 12., 12., 12.], [ 8., 9., 10., 11.]]) 节省内存运行一些操作可能为新结果分配内存。例如Y = X + Y, Y会指向一个为X + Y分配的新地址。before = id(Y) #id()函数给我们提供了内存中引用对象的确切地址 Y = Y + X id(Y) == before False 运行Y = Y + X后，我们会发现id(Y)指向另一个位置。 这是因为Python首先计算Y + X，为结果分配新的内存，然后使Y指向内存中的这个新位置。这可能是不可取的，原因有两个：1.我们不想总是不必要地分配内存。在机器学习中，我们可能有数百兆的参数，并且在一秒内多次更新所有参数。通常情况下，我们希望原地执行这些更新；2.如果我们不原地更新，其他引用仍然会指向旧的内存位置，这样我们的某些代码可能会无意中引用旧的参数。原地操作1.我们可以使用切片表示法将操作的结果分配给先前分配的数组，例如Y[:] = 。 我们首先创建一个新的矩阵Z，其形状与另一个Y相同， 使用zeros_like来分配一个全 0的块。Z = torch.zeros_like(Y) print(&#39;id(Z):&#39;, id(Z)) Z[:] = X + Y print(&#39;id(Z):&#39;, id(Z)) id(Z): 1925677330576 id(Z): 1925677330576 2.如果在后续计算中没有重复使用X， 我们也可以使用X[:] = X + Y或X += Y来减少操作的内存开销。before = id(X) X += Y id(X) == before True 类型转换1.torch张量和numpy张量(ndarray)互相转换。A = X.numpy() B = torch.tensor(A) type(A), type(B) (numpy.ndarray, torch.Tensor) 2.将大小为1的张量转换为Python标量调用item函数或Python的内置函数。a = torch.tensor([3.5]) a, a.item(), float(a), int(a) (tensor([3.5000]), 3.5, 3.5, 3)","categories":[{"name":"技术","slug":"技术","permalink":"https://sdracula.github.io/categories/技术/"}],"tags":[{"name":"Pytorch","slug":"Pytorch","permalink":"https://sdracula.github.io/tags/Pytorch/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sdracula.github.io/categories/技术/"}]},{"title":"Hexo支线#01","slug":"Hexo支线-01","date":"2023-03-29T08:01:31.000Z","updated":"2023-08-20T04:57:59.023Z","comments":true,"path":"post/7332.html","link":"","permalink":"https://sdracula.github.io/post/7332.html","excerpt":"","text":"前言时隔一年，终于又有时间更新博客了，好耶！之前的电脑进水了，不过还好文件都有备份，所以是在新电脑上重新配置。 安装Node.js建议安装低于14的版本，否则可能会出现与Hexo不兼容的情况，导致页面空白。 conda install -c conda-forge/label/cf202003 nodejs Hexo安装、初始化与预览1.使用Npm安装Hexo install -g hexo-cli 2.Hexo初始化 hexo init 3.安装依赖 npm install 4.本地预览 hexo g #生成页面：将Markdown文件转换成Html文件。 hexo s #启动服务：启动本地服务器进行预览。 5.访问地址：http://localhost:4000出现Hexo的Hello World页面即成功。 部署Hexo到Github Pages托管1.安装Hexo-deployer-git: npm install hexo-deployer-git --save 2.连接Github注册Github账户，并在本地安装Git。在命令行中设置用户名和邮箱： git config --global user.name &quot;Your GitHub Username&quot; git config --global user.email &quot;Your GitHub Email address&quot; 创建SSH密钥： ssh-keygen -t rsa -C &quot;Your GitHub Email address&quot; 在C:\\Users\\用户名.ssh中用记事本打开隐藏的id_rsa.pub文件并复制其中内容。在Github的Settings页面中选择SSH and GPG keys，并点击New SSH Key，Title可任意输入，在Key中输入复制的内容，然后点击Add SSh key。 3.按修改_config.yml文件末尾Deployment配置，按如下操作： deploy: type: git # repository: git@github.com:用户名/用户名.github.io.git # SSH连接 # repository: https://github.com/sdracula/sdracula.github.io.git # https连接 branch: main 4.上传文件至Github hexo d","categories":[{"name":"技术","slug":"技术","permalink":"https://sdracula.github.io/categories/技术/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://sdracula.github.io/tags/Web/"},{"name":"Hexo","slug":"Hexo","permalink":"https://sdracula.github.io/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://sdracula.github.io/tags/Blog/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sdracula.github.io/categories/技术/"}]},{"title":"Daily20220515","slug":"Daily20220515","date":"2022-05-15T15:31:03.000Z","updated":"2023-08-20T04:57:59.027Z","comments":true,"path":"post/6356.html","link":"","permalink":"https://sdracula.github.io/post/6356.html","excerpt":"","text":"崩溃好不容易改了模型，debug完，loss训练到0.2，结果测试一下直接无语了。 原图 原版PRNEt 自己修改后的PRNet 我愿称之为三维人脸破坏。","categories":[{"name":"生活","slug":"生活","permalink":"https://sdracula.github.io/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"https://sdracula.github.io/categories/生活/"}]},{"title":"基于深度学习的三维人脸重建#01：介绍","slug":"3DFaceRestruction01","date":"2022-05-11T16:54:30.000Z","updated":"2023-08-20T04:57:59.021Z","comments":true,"path":"post/40303.html","link":"","permalink":"https://sdracula.github.io/post/40303.html","excerpt":"","text":"前言人脸是人类最重要的身份特征之一。而相较于容易获取的二维人脸图片，三维人脸携带了更为完整的个人特征信息也就是人脸的三维空间数据。 传统三维人脸重建随着三维人脸重建技术的发展，三维人脸也逐渐走入我们的生活。我们平时可能都使用过支付宝的刷脸支付，我们在付款时只需要将人脸对准在识别区域内，就可以轻松付款。这一支付方式正是应用了基于三维结构光的三维人脸重建技术。 不只是支付安保领域，三维人脸重建技术也经常出现在影视娱乐领域中。在番剧刀剑神域中，主角们在虚拟游戏世界中的形象与现实世界中的形象完全相同也正是因为头戴式设备的扫描功能。 我们能看到像南京理工大学左超教授智能计算实验室团队的基于SLAM的快速三维建模技术和三维人脸测量技术在精度和设备约束上做出了一定的突破。 现代三维人脸重建技术那么为什么三维人脸重建技术并没有更进一步地应用并普及到我们的生活中？ 在我看来，传统的三维人脸重建技术受限于结构光学设备，且往往受到环境与姿态的约束，在成本和可及性上都存在着一定的障碍。 但是三维人脸重建技术能否彻底摆脱设备限制，摆脱环境姿态等约束，仅仅根据一张普通的图片进行？ 对此，现代三维人脸重建技术作出了它的回答。现代三维人脸重建技术通过图像信息进行三维人脸重建，在一定程度上解决了这些问题。 现代三维人脸重建技术可以分为基于模型驱动的三维人脸重建技术和基于数据驱动（即基于深度学习）的三维人脸重建技术。 基于模型驱动的三维人脸重建技术1999 年，瑞士巴塞尔大学的科学家Blanz 和Vetter 提出了三维可形变模型（3DMM）。基于模型驱动的三维人脸重建技术以3DMM为核心，旨在将三维人脸数据低维化来建立一个平均人脸模型，并在其基础上拟合相关系数，从而重建三维人脸模型。 基于模型的三维人脸技术同时也受到数据集不易采集和空间信息损失较大的限制，在精度上表现得差强人意。 基于数据驱动（深度学习）的三维人脸重建技术随着深度学习近些年来的突飞猛进，我们似乎有了处理复杂模型和大量三维空间数据的能力，基于深度学习的三维人脸重建技术应运而生。 采用全监督方法进行参数回归最初基于深度学习的三维人脸重建技术的发展方向在于以何种方式将深度学习与三维人脸模型相结合才能够达到较好的重建效果。 具有代表性的工作有Richardson等人在2017年提出的由CoarseNet和FineNet组成的CNN结构。 全监督回归方法虽然能够回归模型参数，仍未能摆脱低维模型参数空间对于精度的限制，在细节重建效果上的表现差强人意。 采用自监督方法端到端地进行回归针对以上问题，许多工作通过对人脸三维特征进行编码以更好地发挥神经网络的回归能力。 VRNet（Volumetric Regression Network）通过体素回归的方式，摆脱模型的限制，在精度上取得了新的突破。但体素同时也是一把双刃剑，这是因为整个三维人脸的体素不仅包括了人脸表面顶点部分，还包括了人脸下的大量无用数据，导致计算量过大。 不同的是，PRNet(Position map Regression Network)利用UV位置图(UV position map)来描述3D形状。 PRNet将三维人脸映射到UV位置图上并通过一个简单的编码器-解码器结构的网络预测UV位置图坐标。 展望随着Unet、Transformer、Attention注意力机制的流行屠榜，我们能否将这些新生代优秀的模型机制应用到三维人脸重建领域当中，让过去几年里优秀的工作重获新生？","categories":[{"name":"技术","slug":"技术","permalink":"https://sdracula.github.io/categories/技术/"}],"tags":[{"name":"计算机视觉","slug":"计算机视觉","permalink":"https://sdracula.github.io/tags/计算机视觉/"},{"name":"三维人脸重建","slug":"三维人脸重建","permalink":"https://sdracula.github.io/tags/三维人脸重建/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sdracula.github.io/categories/技术/"}]},{"title":"Hexo建站#01：Hexo介绍","slug":"Hexo01","date":"2022-04-29T15:20:00.000Z","updated":"2023-08-20T04:57:59.024Z","comments":true,"path":"post/7654.html","link":"","permalink":"https://sdracula.github.io/post/7654.html","excerpt":"","text":"Hexo简介Hexo是一个快速、简洁且高效的博客框架，我们可以使用这一框架搭建自己的个人博客并将其托管到Github上。 Hexo特性 超快速度：Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。 支持Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。 插件和可扩展性：强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成。 Hexo主题Hexo现在拥有362个不同的主题 人气较高的主题： Sakura(也就是本站所使用的主题) NexT Butterfly 下一篇博客我们将一起进行Hexo的安装。","categories":[{"name":"技术","slug":"技术","permalink":"https://sdracula.github.io/categories/技术/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://sdracula.github.io/tags/Web/"},{"name":"Hexo","slug":"Hexo","permalink":"https://sdracula.github.io/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://sdracula.github.io/tags/Blog/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sdracula.github.io/categories/技术/"}]}]}